# ========================================
# JAiRouter 安全功能配置示例
# ========================================
# 本文件提供了完整的安全功能配置示例
# 将需要的配置复制到对应环境的 application.yml 中以启用安全功能
# 
# 重要提示：
# 1. 生产环境中请务必修改默认密钥和密码
# 2. 敏感信息建议通过环境变量注入
# 3. 根据实际需求调整脱敏规则和审计配置
# ========================================

jairouter:
  security:
    # ========================================
    # 安全功能总开关
    # ========================================
    # 设置为 true 启用安全功能，false 则完全禁用
    # 建议：开发环境可以启用用于测试，生产环境根据需要启用
    enabled: false
    
    # ========================================
    # API Key 认证配置示例
    # ========================================
    api-key:
      # 启用API Key认证
      enabled: true
      
      # API Key请求头名称
      # 客户端需要在此请求头中提供有效的API Key
      header-name: "X-API-Key"
      
      # 默认API Key过期天数
      default-expiration-days: 365
      
      # 启用缓存以提升性能
      cache-enabled: true
      cache-expiration-seconds: 3600
      
      # API Key配置示例
      keys:
        # 管理员API Key示例
        - key-id: "admin-key-001"
          key-value: "${ADMIN_API_KEY:admin-example-key-12345-abcde}"
          description: "管理员API密钥 - 拥有完整权限"
          permissions: ["admin", "read", "write", "delete"]
          expires-at: "2025-12-31T23:59:59"
          enabled: true
          metadata:
            created-by: "system"
            department: "IT"
            security-level: "high"
        
        # 服务API Key示例
        - key-id: "service-key-001"
          key-value: "${SERVICE_API_KEY:service-example-key-67890-fghij}"
          description: "服务API密钥 - 读写权限"
          permissions: ["read", "write"]
          expires-at: "2025-12-31T23:59:59"
          enabled: true
          metadata:
            created-by: "admin"
            service-name: "ai-service"
            security-level: "medium"
        
        # 只读API Key示例
        - key-id: "readonly-key-001"
          key-value: "${READONLY_API_KEY:readonly-example-key-klmno-pqrst}"
          description: "只读API密钥 - 仅查询权限"
          permissions: ["read"]
          expires-at: "2025-06-30T23:59:59"
          enabled: true
          metadata:
            created-by: "admin"
            access-level: "readonly"
            security-level: "low"
    
    # ========================================
    # JWT 认证配置示例
    # ========================================
    jwt:
      # 启用JWT认证（可与API Key同时使用）
      enabled: false
      
      # JWT签名密钥（生产环境必须使用强密钥）
      secret: "${JWT_SECRET:your-jwt-secret-key-here-change-in-production}"
      
      # JWT签名算法
      algorithm: "HS256"
      
      # JWT令牌过期时间（分钟）
      expiration-minutes: 60
      
      # 刷新令牌过期时间（天）
      refresh-expiration-days: 7
      
      # JWT发行者标识
      issuer: "jairouter"
      
      # 启用令牌黑名单功能
      blacklist-enabled: true
      
      # 黑名单缓存配置
      blacklist-cache:
        expiration-seconds: 86400
        max-size: 10000
    
    # ========================================
    # 数据脱敏配置示例
    # ========================================
    sanitization:
      # 请求数据脱敏配置
      request:
        enabled: true
        
        # 敏感词列表（根据业务需求调整）
        sensitive-words:
          - "password"      # 密码
          - "secret"        # 密钥
          - "token"         # 令牌
          - "key"           # 密钥
          - "credential"    # 凭证
          - "auth"          # 认证信息
          - "session"       # 会话信息
          - "private"       # 私有信息
          - "confidential"  # 机密信息
        
        # PII（个人身份信息）正则表达式模式
        pii-patterns:
          - "\\d{11}"                                                    # 手机号码
          - "\\d{18}"                                                    # 身份证号码
          - "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"          # 邮箱地址
          - "\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b"      # 银行卡号
          - "\\b(?:13[0-9]|14[5-9]|15[0-3,5-9]|16[2,5,6,7]|17[0-8]|18[0-9]|19[1,3,5,8,9])\\d{8}\\b"  # 中国手机号
          - "\\b[1-9]\\d{5}(18|19|20)\\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])\\d{3}[0-9Xx]\\b"  # 身份证号
        
        # 脱敏字符
        masking-char: "*"
        
        # 脱敏策略配置
        strategies:
          phone: "keep-prefix-suffix"    # 手机号保留前3位和后4位
          email: "keep-domain"           # 邮箱保留域名部分
          id-card: "keep-prefix-suffix"  # 身份证保留前6位和后4位
          default: "full-mask"           # 默认完全脱敏
        
        # 记录脱敏操作日志
        log-sanitization: true
        
        # 白名单用户（这些用户的请求跳过脱敏）
        whitelist-users:
          - "admin-key-001"
        
        # 白名单IP地址
        whitelist-ips:
          - "127.0.0.1"
          - "::1"
        
        # 脱敏规则优先级
        rule-priorities:
          phone: 1
          email: 2
          id-card: 3
          bank-card: 4
          sensitive-word: 5
      
      # 响应数据脱敏配置
      response:
        enabled: true
        
        # 响应中的敏感词
        sensitive-words:
          - "internal"      # 内部信息
          - "debug"         # 调试信息
          - "error"         # 错误详情
          - "exception"     # 异常信息
          - "stack"         # 堆栈信息
          - "trace"         # 跟踪信息
          - "system"        # 系统信息
          - "server"        # 服务器信息
        
        # 响应中的PII模式
        pii-patterns:
          - "\\d{11}"
          - "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
          - "\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b"
        
        # 响应脱敏字符
        masking-char: "*"
        
        # 记录响应脱敏日志
        log-sanitization: true
        
        # 保持JSON结构完整性
        preserve-json-structure: true
        
        # 不同服务类型的差异化脱敏策略
        service-specific-rules:
          chat:
            # 聊天服务的特殊脱敏规则
            additional-patterns:
              - "\\b(?:QQ|微信|WeChat)[:：]?\\s*\\d+\\b"  # QQ号、微信号
          embedding:
            # 向量服务通常不需要额外脱敏
            enabled: false
          rerank:
            # 重排序服务的脱敏规则
            preserve-ranking-scores: true
    
    # ========================================
    # 安全审计配置示例
    # ========================================
    audit:
      # 启用安全审计功能
      enabled: true
      
      # 审计日志级别
      log-level: "INFO"
      
      # 是否在审计日志中包含请求体（注意隐私）
      include-request-body: false
      
      # 是否在审计日志中包含响应体（注意隐私）
      include-response-body: false
      
      # 审计日志保留天数
      retention-days: 90
      
      # 启用实时告警
      alert-enabled: true
      
      # 告警阈值配置
      alert-thresholds:
        auth-failures-per-minute: 10
        sanitization-operations-per-minute: 100
        suspicious-requests-per-minute: 20
      
      # 审计事件类型配置
      event-types:
        authentication-success: true
        authentication-failure: true
        authorization-failure: true
        sanitization-applied: true
        configuration-changed: true
        security-alert: true
        suspicious-activity: true
      
      # 审计日志存储配置
      storage:
        type: "file"
        file-path: "logs/security-audit.log"
        rotation:
          max-file-size: "100MB"
          max-files: 30
    
    # ========================================
    # 安全监控配置示例
    # ========================================
    monitoring:
      # 启用安全监控
      enabled: true
      
      # 监控指标配置
      metrics:
        authentication:
          enabled: true
          histogram-buckets: [0.1, 0.5, 1.0, 2.0, 5.0, 10.0]
        
        sanitization:
          enabled: true
          histogram-buckets: [0.01, 0.05, 0.1, 0.5, 1.0, 2.0]
        
        security-events:
          enabled: true
          by-event-type: true
          by-user: true
          by-ip: true
      
      # 告警配置
      alerts:
        enabled: true
        
        thresholds:
          authentication-failure-rate: 0.1
          sanitization-error-rate: 0.05
          response-time-p99: 1000
          max-requests-per-minute: 1000
        
        notifications:
          email:
            enabled: false
            recipients: []
          webhook:
            enabled: false
            url: ""
          log:
            enabled: true
    
    # ========================================
    # 性能优化配置示例
    # ========================================
    performance:
      # 认证性能优化
      authentication:
        async-enabled: true
        thread-pool-size: 10
        timeout-ms: 5000
      
      # 脱敏性能优化
      sanitization:
        parallel-enabled: true
        thread-pool-size: 5
        streaming-threshold: 1048576  # 1MB
        regex-cache-size: 100
      
      # 缓存配置
      cache:
        # Redis缓存配置
        redis:
          enabled: false
          host: "${REDIS_HOST:localhost}"
          port: "${REDIS_PORT:6379}"
          password: "${REDIS_PASSWORD:}"
          database: 0
          timeout: 2000
          pool:
            max-active: 8
            max-idle: 8
            min-idle: 0
        
        # 本地缓存配置
        local:
          enabled: true
          api-key:
            max-size: 1000
            expire-after-write: 3600
          jwt-blacklist:
            max-size: 10000
            expire-after-write: 86400

# ========================================
# 环境变量说明
# ========================================
# 以下环境变量需要在部署时设置：
#
# API Key相关：
# - ADMIN_API_KEY: 管理员API密钥
# - SERVICE_API_KEY: 服务API密钥
# - READONLY_API_KEY: 只读API密钥
#
# JWT相关：
# - JWT_SECRET: JWT签名密钥（必须是强密钥）
#
# Redis相关（如果启用Redis缓存）：
# - REDIS_HOST: Redis服务器地址
# - REDIS_PORT: Redis服务器端口
# - REDIS_PASSWORD: Redis密码
#
# 告警相关：
# - SECURITY_ALERT_EMAIL: 安全告警邮箱
# - SECURITY_ALERT_WEBHOOK: 安全告警Webhook URL
# ========================================